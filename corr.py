#计算点数与函数值、梯度模的关系
import numpy as np
import sympy
import matplotlib.pyplot as plt
from scipy.spatial import Delaunay
import pandas as pd
pi=3.1415926
###########算例信息################

n1=16
n2=81
n=n1+n2
def f(x,y):
    return 10*(0.5*x+np.arctan(-y)+np.sin(2*x+y))
#边界点
X1=[-2,-1,0,1,2,2,2,2,2,1,0,-1,-2,-2,-2,-2]
Y1=[2,2,2,2,2,1,0,-1,-2,-2,-2,-2,-2,-1,0,1]
X1= np.array(X1)
Y1= np.array(Y1)
x=[-1.63180132, -1.33845028, -0.94792892, -0.39804199,  0.08475933,  0.54332847,
  1.02449757,  1.54084361,  1.88725322, -1.64049205, -1.37733768, -0.66371016,
 -0.36887942, -0.04262388,  0.17816464,  1.03509705,  1.40729553,  1.78683477,
 -1.73793084, -1.35080437, -0.70260419, -0.32424922, -0.00724222,  0.47941727,
  0.86356106,  1.17366388,  1.57971445, -1.87638592, -0.89897561, -0.74496364,
 -0.42592271, -0.17614119,  0.55414901,  0.82637424,  1.1816647 ,  1.51338452,
 -1.53840714, -1.17239303, -0.8029508 , -0.43597609, -0.01074082,  0.44430779,
  0.79777089,  1.16832782,  1.51118183, -1.52213974, -1.20550601, -0.86340974,
 -0.570208  ,  0.14881911,  0.47603216,  0.84423499,  0.83532528,  1.89555364,
 -1.59384887, -1.22246222, -0.82289537, -0.54154582,  0.03519104,  0.41335257,
  0.84290999,  1.46440971,  1.73951351, -1.77873003, -1.38002699, -0.96103694,
 -0.20681159,  0.05056001,  0.34065614,  0.61722691,  1.22478198,  1.6631021,
 -1.88725793, -1.55001543, -1.1949777 , -0.53246563, -0.11101444,  0.28795524,
  0.98700965,  1.318881  ,  1.62977682]
y=[ -1.9411873 , -1.77483976, -1.61165398,
 -1.63364577, -1.75170737, -1.94764999, -1.61704097, -1.91847394, -1.9462955,
 -1.34402986, -1.36966669, -1.27218196, -1.25844353, -1.10884472, -1.22036801,
 -1.16566197, -1.28115122, -1.52596175, -0.71028601, -0.85053326, -0.76600027,
 -0.87065741, -0.9461786 , -0.73286072, -0.69266332, -0.78241696, -0.94844815,
 -0.39816629, -0.29047927, -0.33201384, -0.4176055 , -0.46043509, -0.34303784,
 -0.45485671, -0.42077918, -0.46152662,  0.03291143,  0.08440569,  0.07421785,
  0.07331677,  0.00418551, -0.06123702, -0.07877293, -0.09182735, -0.05412666,
  0.4567239 ,  0.41095268,  0.44468757,  0.30437217,  0.43181856,  0.41711693,
  0.37386562,  0.2870585 ,  0.40616698,  0.94560319,  0.84140962,  0.79365831,
  0.69886633,  0.87400217,  0.88736286,  0.75320781,  0.98642644,  0.73253852,
  1.51539212,  1.31212218,  1.08686548,  1.27615626,  1.18725925,  1.12770779,
  1.14096446,  1.39676452,  1.28124675,  1.94584225,  1.91804109,  1.53800191,
  1.94764999,  1.78205054,  1.76609128,  1.54999358,  1.73803262,  1.94134503]
x_=[-1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6,
    -1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6,
    -1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6,
    -1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6,
    -1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6,
    -1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6,
    -1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6,
    -1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6,
    -1.6,-1.2,-0.8,-0.4,0,0.4,0.8,1.2,1.6]
y_=[-1.6,-1.6,-1.6,-1.6,-1.6,-1.6,-1.6,-1.6,-1.6,
    -1.2,-1.2,-1.2,-1.2,-1.2,-1.2,-1.2,-1.2,-1.2,
    -0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,-0.8,
    -0.4,-0.4,-0.4,-0.4,-0.4,-0.4,-0.4,-0.4,-0.4,
    0,0,0,0,0,0,0,0,0,
    0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,
    0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,
    1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,
    1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6]
X2=np.array(x_)
Y2=np.array(y_)
C=np.append(X1,X2) 
D=np.append(Y1,Y2) 
B=[[ 0 for i in range(2) ] for j in range(n)]
for i in range(n):
    B[i][0]=C[i]
    B[i][1]=D[i]
point_0=np.array(B)
X=np.array(x)
Y=np.array(y)
C1=np.append(X1,X) 
D1=np.append(Y1,Y) 
B1=[[ 0 for i in range(2) ] for j in range(n)]
for i in range(n):
    B1[i][0]=C1[i]
    B1[i][1]=D1[i]
point_1=np.array(B1)



###########################
#求f(x,y)
a1=[]
a2=[]
for i in range(n2):
    n=f(x[i],y[i])
    n_=f(x_[i],y_[i])
    a1.append(n)
    a2.append(n_)
###########################
#求梯度模
b1=[]
b2=[]
def part_1(index,x,y):
    e=10 ** (-4)
    n=f(x,y)
    if index == 0:
        x_1=x+e
        m=f(x_1,y)
        k=(m-n)/e
    else:
        y_1=y+e
        m=f(x,y_1)
        k=(m-n)/e
    return k
def delta_length(x,y):
    return np.sqrt((part_1(0,x,y)**2+(part_1(1,x,y)**2)))
for i in range(n2):
    nn=delta_length(x[i],y[i])
    nn_=delta_length(x_[i],y_[i])
    b1.append(nn)
    b2.append(nn_)
######################点数变化#######################
a1.sort()
a2.sort()
a1=np.array(a1/max(a1))
a2=a2/max(a2)
h1=0
h2=0
h3=0
h4=0
h5=0
h=[]
for i in range(n2):
    if  a1[i] >0.8:
        h5+=1
    elif a1[i] >0.6:
        h4+=1
    elif a1[i] >0.4:
        h3+=1
    elif a1[i] >0.2:
        h2+=1
    else:
        h1+=1
h.append(h1)
h.append(h2)
h.append(h3)
h.append(h4)
h.append(h5)
b1.sort()
b2.sort()
b1=np.array(b1/max(b1))
a2=b2/max(b2)
g1=0
g2=0
g3=0
g4=0
g5=0
g=[]
for i in range(n2):
    if  b1[i] >0.8:
        g5+=1
    elif b1[i] >0.6:
        g4+=1
    elif b1[i] >0.4:
        g3+=1
    elif b1[i] >0.2:
        g2+=1
    else:
        g1+=1
g.append(g1)
g.append(g2)
g.append(g3)
g.append(g4)
g.append(g5)
######################计算与函数值相关系数#########################
h=np.array(h)
hes=[0.1,0.3,0.5,0.7,0.9]
print('点数与函数值之间的相关系数：{}'.format(np.corrcoef(h,hes)[0][1]))
#####################计算与梯度模相关系数##########################
g=np.array(g)
print('点数与梯度模之间的相关系数：{}'.format(np.corrcoef(g,hes)[0][1]))